name: 🚀 Deploy to AWS EC2 Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlearn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint || true

    - name: 🏗️ Build TypeScript
      run: npm run build

    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: 🧪 Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
        REDIS_URL: redis://localhost:6379
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
      run: npm test || true

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          coverage/
          test-results.xml
        retention-days: 30

  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci --only=production

    - name: 🏗️ Build application
      run: npm run build

    - name: 🗄️ Generate Prisma client
      run: npx prisma generate

    - name: 📦 Create deployment package
      run: |
        mkdir -p deploy
        cp -r dist deploy/
        cp -r node_modules deploy/
        cp -r prisma deploy/
        cp -r public deploy/
        cp package*.json deploy/
        cp ecosystem.config.js deploy/
        tar -czf openlearn-${{ github.sha }}.tar.gz -C deploy .

    - name: 📤 Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: openlearn-build-${{ github.sha }}
        path: openlearn-${{ github.sha }}.tar.gz
        retention-days: 30

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifact
      uses: actions/download-artifact@v4
      with:
        name: openlearn-build-${{ github.sha }}

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: 📋 Create deployment script
      run: |
        cat > deploy-to-ec2.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Colors
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        RED='\033[0;31m'
        NC='\033[0m'
        
        log() {
            echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
        }
        
        success() {
            echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ✓ $1${NC}"
        }
        
        error() {
            echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ✗ $1${NC}"
        }
        
        DEPLOY_DIR="/home/ubuntu/openlearn"
        BUILD_FILE="openlearn-${{ github.sha }}.tar.gz"
        
        log "🚀 Starting deployment to production..."
        
        # Create deployment directory
        mkdir -p $DEPLOY_DIR/releases/${{ github.sha }}
        cd $DEPLOY_DIR
        
        # Backup current release
        if [ -L current ]; then
            log "📦 Backing up current release..."
            cp -P current previous || true
        fi
        
        # Extract new build
        log "📦 Extracting new build..."
        tar -xzf /tmp/$BUILD_FILE -C releases/${{ github.sha }}
        
        # Copy environment file
        log "⚙️ Copying environment configuration..."
        cp .env releases/${{ github.sha }}/.env
        
        # Update symlink
        log "🔗 Updating current release symlink..."
        ln -nfs releases/${{ github.sha }} current
        
        # Install dependencies and run migrations
        cd current
        log "🗄️ Running database migrations..."
        npx prisma migrate deploy
        
        # Restart application
        log "⚡ Restarting application..."
        pm2 reload ecosystem.config.js --env production || pm2 start ecosystem.config.js --env production
        
        # Save PM2 configuration
        pm2 save
        
        # Health check
        log "🏥 Performing health check..."
        sleep 10
        
        for i in {1..5}; do
            if curl -f -s http://localhost:3000/health > /dev/null; then
                success "✅ Deployment successful! Application is healthy."
                break
            else
                if [ $i -eq 5 ]; then
                    error "❌ Health check failed after 5 attempts"
                    # Rollback
                    if [ -L previous ]; then
                        log "🔄 Rolling back to previous version..."
                        ln -nfs previous current
                        pm2 reload ecosystem.config.js --env production
                    fi
                    exit 1
                fi
                log "⏳ Health check attempt $i failed, retrying..."
                sleep 10
            fi
        done
        
        # Cleanup old releases (keep last 5)
        log "🧹 Cleaning up old releases..."
        cd $DEPLOY_DIR/releases
        ls -t | tail -n +6 | xargs -r rm -rf
        
        success "🎉 Deployment completed successfully!"
        
        # Show current status
        log "📊 Current status:"
        pm2 status
        EOF
        
        chmod +x deploy-to-ec2.sh

    - name: 📤 Copy files to EC2
      run: |
        # Add EC2 to known hosts
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
        
        # Copy build file
        scp -o StrictHostKeyChecking=no openlearn-${{ github.sha }}.tar.gz ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/
        
        # Copy deployment script
        scp -o StrictHostKeyChecking=no deploy-to-ec2.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/

    - name: 🚀 Execute deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy-to-ec2.sh'

    - name: 🧹 Cleanup
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/openlearn-${{ github.sha }}.tar.gz /tmp/deploy-to-ec2.sh'

    - name: 📊 Post-deployment status
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          echo "🖥️ System Status:"
          echo "=================="
          echo "📊 Memory Usage: $(free | grep Mem | awk "{printf(\"%.1f%%\", \$3/\$2 * 100.0)}")"
          echo "💾 Disk Usage: $(df -h / | awk "NR==2{printf \"%s\", \$5}")"
          echo ""
          echo "⚡ PM2 Processes:"
          pm2 status
          echo ""
          echo "🐳 Docker Containers:"
          docker ps --format "table {{.Names}}\t{{.Status}}"
          echo ""
          echo "🏥 Health Check:"
          curl -s http://localhost:3000/health | jq . || echo "Health check failed"
        '

  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Deployment Success Notification
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Deployment to production completed successfully!"
        echo "🔗 Application: https://openlearn.org.in"
        echo "📊 Status: https://openlearn.org.in/status-page"
        echo "📈 Health: https://openlearn.org.in/health"

    - name: 📢 Deployment Failure Notification
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Deployment to production failed!"
        echo "🔍 Please check the logs for details"
        echo "🔄 Consider rolling back if necessary"
