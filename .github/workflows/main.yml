name: OpenLearn CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Build
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlearn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma Client
        run: npx prisma generate

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
        run: npx prisma migrate deploy

      - name: Build TypeScript
        run: npm run build

      - name: Install production dependencies only
        run: |
          npm ci --only=production --ignore-scripts
          npx prisma generate

      - name: Create deployment package
        run: |
          mkdir -p deploy-package
          cp -r dist deploy-package/
          cp -r node_modules deploy-package/
          cp -r prisma deploy-package/
          cp package.json deploy-package/
          cp package-lock.json deploy-package/
          cp docker-compose.yml deploy-package/
          cp Dockerfile.production deploy-package/
          cp -r src/templates deploy-package/templates 2>/dev/null || echo "No templates directory"

      - name: Upload deployment package
        uses: actions/upload-artifact@v4
        with:
          name: deployment-package
          path: deploy-package/
          retention-days: 7

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production

    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v4
        with:
          name: deployment-package
          path: ./deploy-package

      - name: Create deployment archive
        run: |
          cd deploy-package
          tar -czf ../deployment.tar.gz .
          cd ..
          echo "Archive size: $(du -h deployment.tar.gz | cut -f1)"

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Add EC2 to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Create deployment directory on server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
            mkdir -p /home/ubuntu/openlearn-backend/releases/${{ github.sha }}
            mkdir -p /home/ubuntu/openlearn-backend/backups
          '

      - name: Copy deployment package to server
        run: |
          scp -o StrictHostKeyChecking=no deployment.tar.gz \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/ubuntu/openlearn-backend/releases/${{ github.sha }}/

      - name: Create deployment script
        run: |
          cat > deploy-to-server.sh << 'EOF'
          #!/bin/bash
          set -e

          DEPLOYMENT_SHA="${1:-unknown}"
          DEPLOY_DIR="/home/ubuntu/openlearn-backend"
          RELEASE_DIR="$DEPLOY_DIR/releases/$DEPLOYMENT_SHA"
          BACKUP_DIR="$DEPLOY_DIR/backups/backup-$(date +%Y%m%d-%H%M%S)"

          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting deployment of commit $DEPLOYMENT_SHA"

          # Navigate to deployment directory
          cd "$DEPLOY_DIR"

          # Backup current deployment
          if [ -d "current" ]; then
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Backing up current deployment..."
            mkdir -p "$BACKUP_DIR"
            cp -r current/* "$BACKUP_DIR/" || echo "Backup warning: some files may not have been copied"
            
            # Keep only last 5 backups
            cd "$DEPLOY_DIR/backups"
            ls -t | tail -n +6 | xargs -r rm -rf
            cd "$DEPLOY_DIR"
          fi

          # Extract new deployment
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Extracting deployment package..."
          cd "$RELEASE_DIR"
          tar -xzf deployment.tar.gz
          rm deployment.tar.gz

          # Stop all running containers thoroughly
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Stopping all containers..."
          cd "$DEPLOY_DIR"
          
          # Stop containers from current symlink
          if [ -d "current" ]; then
            cd current
            docker-compose down || true
            cd "$DEPLOY_DIR"
          fi
          
          # Stop any containers that might be using the ports
          docker stop $(docker ps -q --filter "expose=3000" --filter "expose=5432" --filter "expose=6379") 2>/dev/null || true
          
          # Additional cleanup: stop containers by name pattern
          docker ps -a --format '{{.Names}}' | grep -E 'postgres|redis|openlearn|current' | xargs -r docker stop 2>/dev/null || true
          docker ps -a --format '{{.Names}}' | grep -E 'postgres|redis|openlearn|current' | xargs -r docker rm 2>/dev/null || true

          # Update current symlink
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Updating current deployment..."
          rm -rf current
          ln -s "$RELEASE_DIR" current

          # Verify .env file exists in root directory
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Verifying environment file..."
          if [ ! -f "$DEPLOY_DIR/.env" ]; then
            echo "ERROR: .env file not found at $DEPLOY_DIR/.env"
            echo "Please ensure .env file exists in $DEPLOY_DIR/"
            exit 1
          fi
          
          # Verify critical variables are set
          if grep -q "JWT_SECRET" "$DEPLOY_DIR/.env"; then
            echo "Environment variables verified in $DEPLOY_DIR/.env"
          else
            echo "ERROR: .env file appears to be empty or invalid"
            exit 1
          fi

          # Build Docker image with pre-built artifacts
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Building Docker image..."
          cd current
          docker-compose --env-file "$DEPLOY_DIR/.env" build app

          # Start all services with explicit env file
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting all services..."
          docker-compose --env-file "$DEPLOY_DIR/.env" up -d

          # Wait for services to start
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Waiting for services to start..."
          sleep 10

          # Check if app container is running or crashing
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Checking container status..."
          docker-compose --env-file "$DEPLOY_DIR/.env" ps
          
          # Show app logs for debugging
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] App container logs:"
          docker-compose --env-file "$DEPLOY_DIR/.env" logs --tail=50 app || true

          # Wait a bit more for app to stabilize
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Waiting for app to stabilize..."
          sleep 20

          # Check if app container is still running
          if ! docker-compose --env-file "$DEPLOY_DIR/.env" ps app | grep -q "Up"; then
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: App container is not running!"
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Container status:"
            docker-compose --env-file "$DEPLOY_DIR/.env" ps
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Full logs:"
            docker-compose --env-file "$DEPLOY_DIR/.env" logs app
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Deployment failed, attempting rollback..."
            docker-compose --env-file "$DEPLOY_DIR/.env" down
            cd "$DEPLOY_DIR"
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf current
              ln -s "$BACKUP_DIR" current
              cd current
              docker-compose --env-file "$DEPLOY_DIR/.env" up -d
            fi
            exit 1
          fi

          # Run database migrations
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Running database migrations..."
          if ! docker-compose --env-file "$DEPLOY_DIR/.env" exec -T app npx prisma migrate deploy; then
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Migration failed, attempting rollback..."
            docker-compose --env-file "$DEPLOY_DIR/.env" down
            cd "$DEPLOY_DIR"
            if [ -d "$BACKUP_DIR" ]; then
              rm -rf current
              ln -s "$BACKUP_DIR" current
              cd current
              docker-compose --env-file "$DEPLOY_DIR/.env" up -d
            fi
            exit 1
          fi

          # Perform health checks
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Performing health checks..."
          for i in {1..10}; do
            if curl -f -s http://localhost:3000/health > /dev/null 2>&1; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check passed!"
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] Deployment successful!"
              
              # Cleanup old releases (keep last 3)
              cd "$DEPLOY_DIR/releases"
              ls -t | tail -n +4 | xargs -r rm -rf
              
              exit 0
            fi
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check attempt $i/10 failed, retrying..."
            sleep 10
          done

          # Health check failed - attempt rollback
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check failed after 10 attempts"
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Attempting rollback to previous version..."
          
          cd "$DEPLOY_DIR"
          docker-compose --env-file "$DEPLOY_DIR/.env" down
          
          if [ -d "$BACKUP_DIR" ]; then
            rm -rf current
            ln -s "$BACKUP_DIR" current
            cd current
            docker-compose --env-file "$DEPLOY_DIR/.env" up -d
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Rollback completed"
          else
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] No backup available for rollback"
          fi
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Deployment failed - check logs:"
          docker-compose --env-file "$DEPLOY_DIR/.env" logs --tail=50 app
          
          exit 1
          EOF

          chmod +x deploy-to-server.sh

      - name: Copy deployment script to server
        run: |
          scp -o StrictHostKeyChecking=no deploy-to-server.sh \
            ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/deploy-${{ github.sha }}.sh

      - name: Execute deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "bash /tmp/deploy-${{ github.sha }}.sh ${{ github.sha }}"

      - name: Cleanup deployment script
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} \
            "rm -f /tmp/deploy-${{ github.sha }}.sh" || true

      - name: Display deployment info
        if: success()
        run: |
          echo "Deployment completed successfully"
          echo "Commit: ${{ github.sha }}"
          echo "Deployed to: /home/ubuntu/openlearn-backend/current"

  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [test, deploy]
    if: always() && github.ref == 'refs/heads/main'

    steps:
      - name: Deployment Success
        if: needs.deploy.result == 'success'
        run: |
          echo "Deployment to production completed"
          echo "App: https://${{ secrets.EC2_HOST }}:3000"
          echo "Health Check: https://${{ secrets.EC2_HOST }}:3000/health"

      - name: Deployment Failure
        if: needs.deploy.result == 'failure'
        run: |
          echo "Deployment to production failed"
          echo "Check logs for details"
