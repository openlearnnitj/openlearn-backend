name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18'

jobs:
  # Skip if PR is draft
  check-draft:
    name: Check PR Status
    runs-on: ubuntu-latest
    outputs:
      is_draft: ${{ steps.draft.outputs.is_draft }}
    steps:
    - name: Check if PR is draft
      id: draft
      run: |
        if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
          echo "is_draft=true" >> $GITHUB_OUTPUT
          echo "This is a draft PR - skipping full validation"
        else
          echo "is_draft=false" >> $GITHUB_OUTPUT
          echo "This is a ready PR - running full validation"
        fi

  # Validate PR details
  pr-validation:
    name: PR Validation
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate PR title
      run: |
        title="${{ github.event.pull_request.title }}"
        
        # Check if title follows conventional commit format (optional but recommended)
        if [[ ! "$title" =~ ^(feat|fix|docs|style|refactor|test|chore|ci)(\(.+\))?: .+ ]]; then
          echo "WARNING: PR title doesn't follow conventional commit format"
          echo "Recommended format: type(scope): description"
          echo "Examples: feat: add user authentication, fix(api): resolve database connection issue"
        else
          echo "PR title follows conventional commit format"
        fi

    - name: Check PR description
      run: |
        description="${{ github.event.pull_request.body }}"
        
        if [ -z "$description" ] || [ "$description" = "null" ]; then
          echo "WARNING: PR description is empty"
          echo "Please add a description explaining the changes"
        else
          echo "PR has description"
        fi

    - name: Check changed files
      run: |
        echo "Files changed in this PR:"
        git diff --name-only origin/main...HEAD
        
        # Check if any sensitive files are changed
        if git diff --name-only origin/main...HEAD | grep -E "\.(env|key|pem)$"; then
          echo "WARNING: Sensitive files detected - please review carefully"
        fi

  # Full test suite for PRs
  test-pr:
    name: Test PR Changes
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlearn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint with annotations
      run: |
        npm run lint || {
          echo "ERROR: ESLint failed - please fix linting errors before merging"
          exit 1
        }

    - name: Build TypeScript
      run: |
        npm run build || {
          echo "ERROR: TypeScript build failed - please fix compilation errors"
          exit 1
        }

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: Run tests with coverage
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
      run: |
        npm test || {
          echo "ERROR: Tests failed - please fix failing tests before merging"
          exit 1
        }

    - name: Upload coverage to artifact
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pr-coverage-${{ github.event.pull_request.number }}
        path: coverage/
        retention-days: 30

  # Security check
  security-check:
    name: Security Check
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run security audit
      run: |
        npm audit --audit-level high || {
          echo "WARNING: High/critical security vulnerabilities found"
          echo "Please run 'npm audit fix' to resolve them"
          # Don't fail the check, just warn
        }

  # Comment on PR with results
  pr-comment:
    name: Update PR
    runs-on: ubuntu-latest
    needs: [pr-validation, test-pr, security-check]
    if: always() && github.event_name == 'pull_request'

    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );

          const prValidation = '${{ needs.pr-validation.result }}';
          const testResult = '${{ needs.test-pr.result }}';
          const securityResult = '${{ needs.security-check.result }}';

          let status = 'All checks passed!';
          let details = '';

          if (prValidation === 'failure' || testResult === 'failure' || securityResult === 'failure') {
            status = 'Some checks failed';
            details = `
          **Failed Checks:**
          ${prValidation === 'failure' ? '- FAILED: PR Validation' : ''}
          ${testResult === 'failure' ? '- FAILED: Tests' : ''}
          ${securityResult === 'failure' ? '- FAILED: Security Check' : ''}
          
          Please fix the issues and push changes to update this PR.`;
          } else {
            details = `
          **Passed Checks:**
          - PASSED: PR Validation
          - PASSED: Tests
          - PASSED: Security Check
          
          This PR is ready for review!`;
          }

          const body = `## PR Validation Results

          ${status}

          ${details}

          **Branch:** \`${{ github.head_ref }}\` â†’ \`${{ github.base_ref }}\`
          **Commit:** \`${{ github.event.pull_request.head.sha }}\`

          ---
          *This comment is automatically updated when you push changes.*`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
