name: PR Validation

on:
  pull_request:
    branches: [ main ]
    types: [opened, synchronize, reopened, ready_for_review]

env:
  NODE_VERSION: '18'

jobs:
  # Skip if PR is draft
  check-draft:
    name: Check PR Status
    runs-on: ubuntu-latest
    outputs:
      is_draft: ${{ steps.draft.outputs.is_draft }}
    steps:
    - name: Check if PR is draft
      id: draft
      run: |
        if [ "${{ github.event.pull_request.draft }}" = "true" ]; then
          echo "is_draft=true" >> $GITHUB_OUTPUT
          echo "This is a draft PR - skipping validation"
        else
          echo "is_draft=false" >> $GITHUB_OUTPUT
          echo "This is a ready PR - running validation"
        fi

  # Build PR changes
  build-pr:
    name: Build PR Changes
    runs-on: ubuntu-latest
    needs: check-draft
    if: needs.check-draft.outputs.is_draft == 'false'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: |
        npm run build || {
          echo "ERROR: TypeScript build failed - please fix compilation errors"
          exit 1
        }

  # Comment on PR with results
  pr-comment:
    name: Update PR
    runs-on: ubuntu-latest
    needs: [check-draft, build-pr]
    if: always() && github.event_name == 'pull_request'

    steps:
    - name: Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('PR Validation Results')
          );

          const buildResult = '${{ needs.build-pr.result }}';

          let status = 'Build passed!';
          let details = 'This PR is ready for review!';

          if (buildResult === 'failure') {
            status = 'Build failed';
            details = 'Please fix the build errors and push changes to update this PR.';
          }

          const body = `## PR Validation Results

          ${status}

          **Branch:** \`${{ github.head_ref }}\` â†’ \`${{ github.base_ref }}\`
          **Commit:** \`${{ github.event.pull_request.head.sha }}\`

          ${details}

          ---
          *This comment is automatically updated when you push changes.*`;

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
