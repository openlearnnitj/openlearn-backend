name: Staging Deployment

on:
  push:
    branches: [ develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test Develop Branch
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlearn_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run ESLint
      run: npm run lint

    - name: Build TypeScript
      run: npm run build

    - name: Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
      run: npm test

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: develop-test-results-${{ github.sha }}
        path: |
          coverage/
          test-results.xml
        retention-days: 7

  # Optional: Deploy to staging environment if you have one
  # deploy-staging:
  #   name: Deploy to Staging
  #   runs-on: ubuntu-latest
  #   needs: test
  #   if: github.ref == 'refs/heads/develop'
  #   environment: 
  #     name: staging
  #     url: http://staging.yourdomain.com
  #
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
  #
  #   - name: Deploy to staging
  #     run: |
  #       echo "Deploy to staging server here"
  #       # Add your staging deployment commands

  notify:
    name: Notify Develop Status
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    
    steps:
    - name: Success Notification
      if: needs.test.result == 'success'
      run: |
        echo "Develop branch tests passed!"
        echo "Ready to create PR to main branch"

    - name: Failure Notification
      if: needs.test.result == 'failure'
      run: |
        echo "Develop branch tests failed!"
        echo "Please fix the issues before creating PR to main"
