name: 🚀 Deploy to AWS EC2 Micro Instance

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Run Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openlearn_test
        options: >-
          --health-cmd pg_isready
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: npm ci

    - name: 🔍 Run ESLint
      run: npm run lint || true

    - name: 🏗️ Build TypeScript
      run: npm run build

    - name: 🗄️ Setup test database
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
      run: |
        npx prisma generate
        npx prisma migrate deploy

    - name: 🧪 Run tests
      env:
        NODE_ENV: test
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/openlearn_test
        JWT_SECRET: test-secret
        JWT_REFRESH_SECRET: test-refresh-secret
      run: npm test || true

  deploy-micro:
    name: 🚀 Deploy to EC2 Micro Instance
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔐 Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

    - name: 📋 Create deployment script
      run: |
        cat > deploy-micro-to-ec2.sh << 'EOF'
        #!/bin/bash
        set -e
        
        # Colors
        GREEN='\033[0;32m'
        BLUE='\033[0;34m'
        RED='\033[0;31m'
        NC='\033[0m'
        
        log() {
            echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
        }
        
        success() {
            echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] ✓ $1${NC}"
        }
        
        error() {
            echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ✗ $1${NC}"
        }
        
        DEPLOY_DIR="/home/ubuntu/openlearn-backend"
        
        log "🚀 Starting micro deployment to EC2..."
        
        # Create directory if it doesn't exist
        mkdir -p $DEPLOY_DIR
        cd $DEPLOY_DIR
        
        # Pull latest code
        if [ -d ".git" ]; then
            log "📥 Pulling latest code..."
            git pull origin master || git pull origin main
        else
            log "📥 Cloning repository..."
            git clone https://github.com/openlearnnitj/openlearn-backend.git .
        fi
        
        # Ensure environment file exists
        if [ ! -f ".env" ]; then
            log "⚙️ Creating default environment file..."
            if [ -f "environments/.env.micro" ]; then
                cp environments/.env.micro .env
            else
                error "❌ No environment template found!"
                exit 1
            fi
            error "❌ Please update .env with your actual values!"
            exit 1
        fi
        
        # Fix Docker permissions if needed
        if ! docker ps >/dev/null 2>&1; then
            log "🔧 Fixing Docker permissions..."
            sudo usermod -aG docker ubuntu || true
            newgrp docker || true
        fi
        
        # Run deployment
        log "🏗️ Running micro deployment..."
        chmod +x deploy.sh
        ./deploy.sh
        
        success "✅ Micro deployment completed!"
        EOF
        chmod +x deploy-micro-to-ec2.sh

    - name: 📤 Copy deployment script to EC2
      run: |
        scp -o StrictHostKeyChecking=no deploy-micro-to-ec2.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/

    - name: 🚀 Execute deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy-micro-to-ec2.sh'

    - name: 🏥 Health check
      run: |
        echo "🏥 Performing health check..."
        sleep 30
        
        for i in {1..5}; do
          if ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'curl -f -s http://localhost:3000/health > /dev/null'; then
            echo "✅ Health check passed!"
            break
          fi
          if [ $i -eq 5 ]; then
            echo "❌ Health check failed after 5 attempts"
            exit 1
          fi
          echo "⏳ Health check attempt $i failed, retrying in 10s..."
          sleep 10
        done

    - name: 🧹 Cleanup
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/deploy-micro-to-ec2.sh'

  notify:
    name: 📢 Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-micro]
    if: always()
    
    steps:
    - name: 📢 Deployment Success Notification
      if: needs.deploy-micro.result == 'success'
      run: |
        echo "🎉 Micro deployment to EC2 completed successfully!"
        echo "📈 Health: http://${{ secrets.EC2_HOST }}:3000/health"

    - name: 📢 Deployment Failure Notification
      if: needs.deploy-micro.result == 'failure'
      run: |
        echo "❌ Micro deployment to EC2 failed!"
        echo "🔄 Check the deployment logs for details"
