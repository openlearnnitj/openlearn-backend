name: Deploy Micro to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

jobs:
  deploy-micro:
    name: Deploy Micro to EC2
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.EC2_PRIVATE_KEY }}

      - name: Create deployment script
        run: |
          cat > deploy-micro-to-ec2.sh << 'EOF'
          #!/bin/bash
          set -e

          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting micro deployment to EC2..."

          # Change to the application directory
          cd /home/ubuntu/openlearn-backend || { echo "Directory not found"; exit 1; }

          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Pulling latest code..."
          
          # Stash any local changes
          git stash push -m "Auto-stash before deployment $(date)" || true
          
          # Fetch all branches and tags
          git fetch --all
          
          # Pull from main branch (NOT master)
          git pull origin main
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Installing dependencies..."
          npm ci --only=production
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Building application..."
          npm run build
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Generating Prisma client..."
          npx prisma generate
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Stopping existing services..."
          docker-compose -f docker-compose.micro.yml down || true
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Cleaning up Docker resources..."
          docker system prune -f || true
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Starting services..."
          docker-compose -f docker-compose.micro.yml up -d --build
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Waiting for services to start..."
          sleep 30
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Running database migrations..."
          docker-compose -f docker-compose.micro.yml exec -T app npx prisma migrate deploy || echo "Migration warning"
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check..."
          for i in {1..5}; do
            if curl -f -s http://localhost:3000/health > /dev/null; then
              echo "[$(date +'%Y-%m-%d %H:%M:%S')] ✅ Deployment successful!"
              exit 0
            fi
            echo "[$(date +'%Y-%m-%d %H:%M:%S')] Health check attempt $i/5..."
            sleep 10
          done
          
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] ❌ Health check failed"
          exit 1
          EOF

          chmod +x deploy-micro-to-ec2.sh

      - name: Copy deployment script to EC2
        run: |
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts
          scp -o StrictHostKeyChecking=no deploy-micro-to-ec2.sh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/

      - name: Execute deployment
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'bash /tmp/deploy-micro-to-ec2.sh'

      - name: Cleanup
        if: always()
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} 'rm -f /tmp/deploy-micro-to-ec2.sh' || true

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-micro]
    if: always()

    steps:
      - name: Success Notification
        if: needs.deploy-micro.result == 'success'
        run: |
          echo "Micro deployment to EC2 completed successfully!"

      - name: Failure Notification
        if: needs.deploy-micro.result == 'failure'
        run: |
          echo "❌ Micro deployment to EC2 failed!"
          echo "Check the logs for details."
