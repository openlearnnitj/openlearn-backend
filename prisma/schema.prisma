// OpenLearn Platform Schema
generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management & RBAC
enum UserRole {
  GRAND_PATHFINDER
  CHIEF_PATHFINDER
  PATHFINDER
  PIONEER
  LUMINARY
}

enum UserStatus {
  PENDING
  ACTIVE
  SUSPENDED
}

model User {
  id        String     @id @default(cuid())
  email     String     @unique
  password  String     // Required password field
  name      String
  role      UserRole   @default(PIONEER)
  status    UserStatus @default(PENDING)
  
  // Social profiles
  twitterHandle   String?
  linkedinUrl     String?
  githubUsername  String?
  kaggleUsername  String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  enrollments     Enrollment[]
  sectionProgress SectionProgress[]
  resourceProgress ResourceProgress[]
  badges          UserBadge[]
  specializations UserSpecialization[]
  auditLogs       AuditLog[]
  assignmentSubmissions AssignmentSubmission[]
  
  // Email service relations
  createdEmailTemplates EmailTemplate[] @relation("EmailTemplateCreator")
  createdEmailJobs      EmailJob[] @relation("EmailJobCreator")
  emailLogs            EmailLog[] @relation("EmailRecipient")
  emailAuditLogs       EmailAuditLog[] @relation("EmailAuditUser")
  
  // Self-referential for approval workflow
  approvedBy   User?   @relation("UserApproval", fields: [approvedById], references: [id])
  approvedById String?
  approvedUsers User[] @relation("UserApproval")
  
  @@map("users")
}

// Course Structure
model Cohort {
  id          String @id @default(cuid())
  name        String // "Cohort 1", "Cohort 2.0"
  description String?
  isActive    Boolean @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  enrollments     Enrollment[]
  specializations Specialization[]
  
  @@map("cohorts")
}

model Specialization {
  id          String  @id @default(cuid())
  name        String  // "AI/ML + Finance Specialist"
  description String?
  
  cohortId String
  cohort   Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  leagues             SpecializationLeague[]
  userSpecializations UserSpecialization[]
  
  @@map("specializations")
}

model League {
  id          String  @id @default(cuid())
  name        String  // "AI/ML", "Finance"
  description String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  weeks         Week[]
  badges        Badge[]
  enrollments   Enrollment[]
  specializations SpecializationLeague[]
  assignment    Assignment?
  
  @@map("leagues")
}

// Junction table for many-to-many between Specialization and League
model SpecializationLeague {
  id Int @id @default(autoincrement())
  
  specializationId String
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)
  
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  order Int // For ordering leagues within a specialization
  
  @@unique([specializationId, leagueId])
  @@map("specialization_leagues")
}

model Week {
  id          String  @id @default(cuid())
  name        String  // "Week 1", "Week 2"
  description String?
  order       Int
  
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  sections Section[]
  
  @@unique([leagueId, order])
  @@map("weeks")
}

model Section {
  id          String  @id @default(cuid())
  name        String  // "Section 1", "Section 2"
  description String?
  order       Int
  
  weekId String
  week   Week @relation(fields: [weekId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  resources SectionResource[]
  progress  SectionProgress[]
  
  @@unique([weekId, order])
  @@map("sections")
}

enum ResourceType {
  BLOG
  VIDEO
  ARTICLE
  EXTERNAL_LINK
}

model SectionResource {
  id    String       @id @default(cuid())
  title String
  url   String
  type  ResourceType
  order Int
  
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  progress ResourceProgress[]
  
  @@unique([sectionId, order])
  @@map("section_resources")
}

// Assignments
enum AssignmentStatus {
  NOT_SUBMITTED
  SUBMITTED
}

model Assignment {
  id          String  @id @default(cuid())
  title       String
  description String
  dueDate     DateTime?
  
  leagueId String @unique
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  submissions AssignmentSubmission[]
  
  @@map("assignments")
}

model AssignmentSubmission {
  id          String           @id @default(cuid())
  content     String?          // Submission text/description
  fileUrl     String?          // File upload URL
  githubUrl   String?          // GitHub repo link
  liveUrl     String?          // Live project URL
  status      AssignmentStatus @default(NOT_SUBMITTED)
  
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  submittedAt DateTime?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([assignmentId, userId])
  @@map("assignment_submissions")
}

// Progress & Completion Tracking
model Enrollment {
  id String @id @default(cuid())
  
  userId   String
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  cohortId String
  cohort   Cohort @relation(fields: [cohortId], references: [id], onDelete: Cascade)
  
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  enrolledAt DateTime @default(now())
  updatedAt  DateTime @updatedAt
  
  @@unique([userId, cohortId, leagueId])
  @@map("enrollments")
}

model SectionProgress {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  sectionId String
  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  
  isCompleted     Boolean   @default(false)
  completedAt     DateTime?
  personalNote    String?
  markedForRevision Boolean @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, sectionId])
  @@map("section_progress")
}

model ResourceProgress {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  resourceId String
  resource   SectionResource @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  
  isCompleted       Boolean   @default(false)
  completedAt       DateTime?
  personalNote      String?
  markedForRevision Boolean   @default(false)
  timeSpent         Int?      // Time spent in seconds (optional)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, resourceId])
  @@map("resource_progress")
}

// Badges & Achievements
model Badge {
  id          String  @id @default(cuid())
  name        String
  description String?
  imageUrl    String?
  
  leagueId String
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  userBadges UserBadge[]
  
  @@map("badges")
}

model UserBadge {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  badgeId String
  badge   Badge  @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  earnedAt DateTime @default(now())
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model UserSpecialization {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  specializationId String
  specialization   Specialization @relation(fields: [specializationId], references: [id], onDelete: Cascade)
  
  completedAt DateTime @default(now())
  
  @@unique([userId, specializationId])
  @@map("user_specializations")
}

// Audit & Tracking
enum AuditAction {
  USER_CREATED
  USER_APPROVED
  USER_ROLE_CHANGED
  USER_STATUS_CHANGED
  USER_PASSWORD_CHANGED
  USER_ENROLLED
  SECTION_COMPLETED
  RESOURCE_COMPLETED
  RESOURCE_MARKED_FOR_REVISION
  BADGE_EARNED
  BADGE_CREATED
  BADGE_UPDATED
  BADGE_DELETED
  BADGE_MANUALLY_AWARDED
  BADGE_REVOKED
  SPECIALIZATION_COMPLETED
  SPECIALIZATION_CREATED
  SPECIALIZATION_UPDATED
  SPECIALIZATION_DELETED
  COHORT_CREATED
  COHORT_UPDATED
  COHORT_DELETED
  LEAGUE_CREATED
  LEAGUE_UPDATED
  LEAGUE_DELETED
  WEEK_CREATED
  WEEK_UPDATED
  WEEK_DELETED
  SECTION_CREATED
  SECTION_UPDATED
  SECTION_DELETED
  SECTION_REORDERED
  RESOURCE_CREATED
  RESOURCE_UPDATED
  RESOURCE_DELETED
  RESOURCE_REORDERED
  ASSIGNMENT_SUBMITTED
  EMAIL_TEMPLATE_CREATED
  EMAIL_TEMPLATE_UPDATED
  EMAIL_TEMPLATE_DELETED
  EMAIL_SENT
  EMAIL_FAILED
  BULK_EMAIL_STARTED
  BULK_EMAIL_COMPLETED
  BULK_EMAIL_FAILED
  EMAIL_SETTINGS_UPDATED
  ERROR_OCCURRED
  UNCAUGHT_EXCEPTION
  UNHANDLED_REJECTION
}

model AuditLog {
  id String @id @default(cuid())
  
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  action      AuditAction
  description String?
  metadata    Json?       // Store additional context as JSON
  
  createdAt DateTime @default(now())
  
  @@map("audit_logs")
}

// System Status & Monitoring
enum SystemComponent {
  API
  DATABASE
  AUTHENTICATION
}

enum SystemStatus {
  OPERATIONAL
  DEGRADED_PERFORMANCE
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
  MAINTENANCE
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

model StatusCheck {
  id String @id @default(cuid())
  
  component     SystemComponent
  status        SystemStatus
  responseTime  Int?            // Response time in milliseconds
  uptime        Boolean         @default(true)
  details       Json?           // Additional status details
  checkedAt     DateTime        @default(now())
  
  @@map("status_checks")
}

model StatusIncident {
  id String @id @default(cuid())
  
  title         String
  description   String
  component     SystemComponent
  severity      IncidentSeverity
  status        IncidentStatus
  
  startedAt     DateTime         @default(now())
  resolvedAt    DateTime?
  
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  updates       IncidentUpdate[]
  
  @@map("status_incidents")
}

model IncidentUpdate {
  id String @id @default(cuid())
  
  incidentId    String
  incident      StatusIncident @relation(fields: [incidentId], references: [id], onDelete: Cascade)
  
  title         String
  description   String
  status        IncidentStatus
  
  createdAt     DateTime @default(now())
  
  @@map("incident_updates")
}

// Email Service Models

// Email Categories
enum EmailCategory {
  WELCOME
  NOTIFICATION
  MARKETING
  SYSTEM
  COURSE_UPDATE
  ACHIEVEMENT
  ADMIN
  REMINDER
}

// Email Templates
model EmailTemplate {
  id          String @id @default(cuid())
  name        String @unique // "welcome_email", "course_completion"
  subject     String
  htmlContent String // HTML template with variables
  textContent String? // Plain text fallback
  variables   Json   // Available template variables
  isActive    Boolean @default(true)
  
  // Template metadata
  category    EmailCategory
  description String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User @relation("EmailTemplateCreator", fields: [createdById], references: [id])
  
  // Relations
  emailJobs   EmailJob[]
  
  @@map("email_templates")
}

// Email Recipient Types
enum EmailRecipientType {
  INDIVIDUAL
  ROLE_BASED
  COHORT_BASED
  LEAGUE_BASED
  ALL_USERS
  CUSTOM_LIST
}

// Email Job Status
enum EmailJobStatus {
  QUEUED
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  SCHEDULED
}

// Email Jobs (Queue Records)
model EmailJob {
  id           String @id @default(cuid())
  jobId        String @unique // Bull queue job ID
  
  // Email details
  templateId   String?
  template     EmailTemplate? @relation(fields: [templateId], references: [id])
  
  subject      String
  htmlContent  String
  textContent  String?
  
  // Recipients
  recipientType EmailRecipientType
  recipients    Json // Array of recipient data
  totalCount    Int
  
  // Filtering criteria
  roleFilter    UserRole?
  cohortFilter  String? // Cohort ID
  leagueFilter  String? // League ID
  statusFilter  UserStatus?
  
  // Status tracking
  status       EmailJobStatus @default(QUEUED)
  priority     Int @default(0)
  scheduledFor DateTime?
  
  // Execution tracking
  startedAt    DateTime?
  completedAt  DateTime?
  failedAt     DateTime?
  
  // Results
  sentCount    Int @default(0)
  failedCount  Int @default(0)
  errorMessage String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdById  String
  createdBy    User @relation("EmailJobCreator", fields: [createdById], references: [id])
  
  // Relations
  emailLogs    EmailLog[]
  
  @@map("email_jobs")
}

// Individual Email Status
enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  BOUNCED
  FAILED
  OPENED
  CLICKED
  UNSUBSCRIBED
}

// Individual Email Logs
model EmailLog {
  id          String @id @default(cuid())
  
  jobId       String
  job         EmailJob @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  recipientId String
  recipient   User @relation("EmailRecipient", fields: [recipientId], references: [id])
  
  email       String // Recipient email at time of sending
  subject     String
  
  status      EmailStatus @default(PENDING)
  sentAt      DateTime?
  deliveredAt DateTime?
  openedAt    DateTime?
  clickedAt   DateTime?
  bouncedAt   DateTime?
  
  // Error tracking
  error       String?
  retryCount  Int @default(0)
  
  // Provider tracking
  messageId   String? // SMTP message ID
  providerData Json?  // Provider-specific data
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([jobId, recipientId])
  @@map("email_logs")
}

// Email Settings/Configuration
model EmailSettings {
  id       String @id @default(cuid())
  
  // SMTP Configuration
  smtpHost     String
  smtpPort     Int
  smtpUser     String
  smtpPassword String // Encrypted
  smtpSecure   Boolean @default(true)
  
  // Default settings
  fromName     String @default("OpenLearn Platform")
  fromEmail    String
  replyToEmail String?
  
  // Rate limiting
  maxEmailsPerHour   Int @default(100)
  maxEmailsPerMinute Int @default(10)
  batchSize          Int @default(10)
  
  // Features
  trackOpens  Boolean @default(true)
  trackClicks Boolean @default(true)
  
  isActive    Boolean @default(true)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("email_settings")
}

// Email Audit Actions
enum EmailAuditAction {
  TEMPLATE_CREATED
  TEMPLATE_UPDATED
  TEMPLATE_DELETED
  EMAIL_SENT
  EMAIL_FAILED
  EMAIL_OPENED
  EMAIL_CLICKED
  EMAIL_BOUNCED
  EMAIL_UNSUBSCRIBED
  BULK_EMAIL_STARTED
  BULK_EMAIL_COMPLETED
  BULK_EMAIL_FAILED
  SETTINGS_UPDATED
}

// Email-specific Audit Logs
model EmailAuditLog {
  id          String @id @default(cuid())
  
  userId      String?
  user        User? @relation("EmailAuditUser", fields: [userId], references: [id])
  
  action      EmailAuditAction
  description String?
  metadata    Json? // Store additional context as JSON
  
  // Related entities
  templateId  String?
  jobId       String?
  emailLogId  String?
  
  ipAddress   String?
  userAgent   String?
  
  createdAt   DateTime @default(now())
  
  @@map("email_audit_logs")
}



