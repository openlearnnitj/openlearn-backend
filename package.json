{
  "name": "openlearn",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/server.js",
    "dev": "nodemon --exec ts-node src/server.ts",
    "dev:setup": "bash scripts/setup-dev.sh",
    "dev:db": "sudo docker-compose -f docker-compose.dev.yml up -d postgres redis",
    "dev:db:stop": "sudo docker-compose -f docker-compose.dev.yml down",
    "dev:db:reset": "npm run dev:db:stop && npm run dev:db && sleep 10 && npm run prisma:reset && npm run db:seed:dev",
    "dev:adminer": "sudo docker-compose -f docker-compose.dev.yml up -d adminer",
    "db:seed:dev": "npx tsx prisma/seed-dev.ts",
    "worker:email": "ts-node src/workers/emailWorker.ts",
    "worker:email:prod": "node dist/workers/emailWorker.js",
    "render:build": "npm run render:install && npm run render:prisma && npm run render:compile && npm run render:migrate && npm run render:seed",
    "render:install": "npm ci --only=production && npm install typescript @types/node prisma ts-node --save-dev",
    "render:prisma": "rm -rf node_modules/.prisma && npx prisma generate --no-hints",
    "render:compile": "npm run build",
    "render:migrate": "npx prisma migrate deploy",
    "render:seed": "npm run seed:admin:production",
    "start:prod": "NODE_ENV=production node dist/server.js",
    "build:prod": "NODE_ENV=production npm run build",
    "postbuild": "npm run prisma:generate",
    "deploy": "npm run build:prod && npm run prisma:deploy",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:deploy": "prisma migrate deploy",
    "prisma:reset": "prisma migrate reset",
    "prisma:studio": "prisma studio",
    "db:seed": "ts-node prisma/seed.ts",
    "seed:admin": "ts-node src/scripts/seedAdmin.ts",
    "seed:admin:production": "node dist/scripts/seedAdmin.js",
    "setup:email-templates": "ts-node src/scripts/setupEmailTemplates.ts",
    "docker:up": "docker compose up -d",
    "docker:down": "docker compose down",
    "docker:logs": "docker compose logs -f",
    "db:test:local": "ts-node src/scripts/testNeonLocal.ts",
    "db:test:prod": "node dist/scripts/testNeonLocal.js",
    "debug:email": "ts-node src/scripts/debugEmailProduction.ts",
    "debug:email:prod": "node dist/scripts/debugEmailProduction.js",
    "test:ses": "ts-node src/scripts/testSESEmails.ts",
    "test:ses:prod": "node dist/scripts/testSESEmails.js",
    "check:ses": "ts-node src/scripts/checkSESVerification.ts",
    "check:ses:prod": "node dist/scripts/checkSESVerification.js",
    "test:email-providers": "ts-node src/scripts/testModularEmailService.ts",
    "test:email-providers:prod": "node dist/scripts/testModularEmailService.js",
    "test:resend": "ts-node src/scripts/testResendSimple.ts",
    "test:resend:prod": "node dist/scripts/testResendSimple.js",
    "test:email": "ts-node src/scripts/testEmailService.ts",
    "test:email:prod": "node dist/scripts/testEmailService.js",
    "test:routes": "ts-node src/scripts/testEmailRoutes.ts",
    "test:routes:prod": "node dist/scripts/testEmailRoutes.js",
    "test:queue": "ts-node src/scripts/testEmailQueue.ts",
    "test:queue:prod": "node dist/scripts/testEmailQueue.js",
    "test:integration": "ts-node src/scripts/testEmailIntegration.ts",
    "test:integration:prod": "node dist/scripts/testEmailIntegration.js",
    "test:flows": "npx tsx src/scripts/testApiFlows.ts",
    "test:flows:quick": "npx tsx src/scripts/testApiFlows.ts --flow=quick",
    "test:flows:migration": "npx tsx src/scripts/testApiFlows.ts --flow=migration",
    "test:flows:registration": "npx tsx src/scripts/testApiFlows.ts --flow=registration",
    "test:flows:admin": "npx tsx src/scripts/testApiFlows.ts --flow=admin",
    "reset:quick": " tsx src/scripts/quickReset.ts",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "@aws-sdk/client-ses": "^3.864.0",
    "@aws-sdk/types": "^3.862.0",
    "@types/axios": "^0.9.36",
    "@types/bull": "^3.15.9",
    "@types/handlebars": "^4.0.40",
    "@types/node-cron": "^3.0.11",
    "@types/nodemailer": "^6.4.17",
    "bcrypt": "^5.1.1",
    "bull": "^4.16.5",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-rate-limit": "^7.5.1",
    "handlebars": "^4.7.8",
    "helmet": "^7.1.0",
    "ioredis": "^5.7.0",
    "jsonwebtoken": "^9.0.2",
    "node-cron": "^4.1.0",
    "nodemailer": "^7.0.5",
    "resend": "^4.8.0"
  },
  "devDependencies": {
    "@prisma/client": "^6.14.0",
    "@types/bcrypt": "^5.0.2",
    "@types/cors": "^2.8.19",
    "@types/express": "^4.17.23",
    "@types/express-rate-limit": "^5.1.3",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/node": "^20.19.11",
    "axios": "^1.11.0",
    "chalk": "^5.6.0",
    "nodemon": "^3.1.4",
    "prisma": "^6.14.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.5.3"
  }
}
